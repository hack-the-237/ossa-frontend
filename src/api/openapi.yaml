
openapi: 3.0.0
info:
  title: Proposal Management API
  description: API for managing RFP documents, proposal creation, and collaboration
  version: 1.0.0
servers:
  - url: https://api.proposalmanagement.com/v1
    description: Production server
  - url: https://staging-api.proposalmanagement.com/v1
    description: Staging server

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Proposals
    description: Proposal management endpoints
  - name: RFP
    description: RFP document management
  - name: Comments
    description: Proposal collaboration comments
  - name: Templates
    description: Proposal and RFP templates
  - name: Knowledge Base
    description: Knowledge base management
  - name: Documents
    description: Document management
  - name: Dashboard
    description: Dashboard data

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
        '422':
          description: Validation error

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Email already exists
        '422':
          description: Validation error

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout a user
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  /proposals:
    get:
      tags:
        - Proposals
      summary: Get all proposals
      operationId: getAllProposals
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [draft, submitted, won, lost]
          description: Filter proposals by status
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
      responses:
        '200':
          description: List of proposals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProposalSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized

    post:
      tags:
        - Proposals
      summary: Create a new proposal
      operationId: createProposal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalInput'
      responses:
        '201':
          description: Proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '401':
          description: Unauthorized
        '422':
          description: Validation error

  /proposals/{id}:
    get:
      tags:
        - Proposals
      summary: Get a proposal by ID
      operationId: getProposalById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      responses:
        '200':
          description: Proposal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found

    put:
      tags:
        - Proposals
      summary: Update a proposal
      operationId: updateProposal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalInput'
      responses:
        '200':
          description: Proposal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found
        '422':
          description: Validation error

    delete:
      tags:
        - Proposals
      summary: Delete a proposal
      operationId: deleteProposal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      responses:
        '204':
          description: Proposal deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found

  /proposals/{id}/sections:
    get:
      tags:
        - Proposals
      summary: Get proposal sections
      operationId: getProposalSections
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      responses:
        '200':
          description: List of proposal sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalSection'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found

  /proposals/{id}/comments:
    get:
      tags:
        - Comments
      summary: Get proposal comments
      operationId: getProposalComments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found

    post:
      tags:
        - Comments
      summary: Add a comment to a proposal
      operationId: addProposalComment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found
        '422':
          description: Validation error

  /proposals/{id}/generate-draft:
    post:
      tags:
        - Proposals
      summary: Generate proposal draft using AI
      operationId: generateProposalDraft
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rfpSummary:
                  type: string
                keyRequirements:
                  type: string
                evaluationCriteria:
                  type: string
                budget:
                  type: string
                timeline:
                  type: string
      responses:
        '200':
          description: Draft generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sections:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProposalSection'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found
        '422':
          description: Validation error

  /proposals/{id}/refine:
    post:
      tags:
        - Proposals
      summary: Refine proposal using AI
      operationId: refineProposal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Proposal ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instructions:
                  type: string
                sections:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Proposal refined successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalSection'
        '401':
          description: Unauthorized
        '404':
          description: Proposal not found
        '422':
          description: Validation error

  /rfp/analyze:
    post:
      tags:
        - RFP
      summary: Analyze RFP document using AI
      operationId: analyzeRfp
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: RFP analyzed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                  keyRequirements:
                    type: string
                  evaluationCriteria:
                    type: string
                  budget:
                    type: string
                  timeline:
                    type: string
        '400':
          description: Invalid file
        '401':
          description: Unauthorized
        '422':
          description: Validation error

  /templates/proposal:
    get:
      tags:
        - Templates
      summary: Get proposal templates
      operationId: getProposalTemplates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of proposal templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        '401':
          description: Unauthorized

  /templates/summary:
    get:
      tags:
        - Templates
      summary: Get RFP summary templates
      operationId: getSummaryTemplates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of summary templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        '401':
          description: Unauthorized

  # New Knowledge Base endpoints
  /knowledge-base:
    get:
      tags:
        - Knowledge Base
      summary: Get all knowledge base documents
      operationId: getAllKnowledgeDocuments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category
        - in: query
          name: search
          schema:
            type: string
          description: Search term for document title or content
        - in: query
          name: sort
          schema:
            type: string
            enum: [newest, oldest, a-z, z-a]
            default: newest
          description: Sort order
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
      responses:
        '200':
          description: List of knowledge base documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KnowledgeDocument'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized

    post:
      tags:
        - Knowledge Base
      summary: Create a new knowledge base document
      operationId: createKnowledgeDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeDocumentInput'
      responses:
        '201':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeDocument'
        '401':
          description: Unauthorized
        '422':
          description: Validation error

  /knowledge-base/categories:
    get:
      tags:
        - Knowledge Base
      summary: Get all knowledge base categories
      operationId: getKnowledgeCategories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of knowledge base categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized

  /knowledge-base/{id}:
    get:
      tags:
        - Knowledge Base
      summary: Get a knowledge base document by ID
      operationId: getKnowledgeDocumentById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeDocument'
        '401':
          description: Unauthorized
        '404':
          description: Document not found

    put:
      tags:
        - Knowledge Base
      summary: Update a knowledge base document
      operationId: updateKnowledgeDocument
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeDocumentInput'
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeDocument'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
        '422':
          description: Validation error

    delete:
      tags:
        - Knowledge Base
      summary: Delete a knowledge base document
      operationId: deleteKnowledgeDocument
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '204':
          description: Document deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Document not found

  /knowledge-base/query:
    post:
      tags:
        - Knowledge Base
      summary: Query the knowledge base using AI
      operationId: queryKnowledgeBase
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: User's question or query
      responses:
        '200':
          description: AI-generated response
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                  sourceDocs:
                    type: array
                    items:
                      $ref: '#/components/schemas/KnowledgeDocumentRef'
        '401':
          description: Unauthorized
        '422':
          description: Validation error

  # Document Upload endpoints
  /documents:
    get:
      tags:
        - Documents
      summary: Get all documents
      operationId: getAllDocuments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [rfp, proposal, contract, other]
          description: Filter by document type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized

    post:
      tags:
        - Documents
      summary: Upload a new document
      operationId: uploadDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - documentType
                - title
              properties:
                file:
                  type: string
                  format: binary
                documentType:
                  type: string
                  enum: [rfp, proposal, contract, other]
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          description: Unauthorized
        '422':
          description: Validation error

  /documents/{id}:
    get:
      tags:
        - Documents
      summary: Get a document by ID
      operationId: getDocumentById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          description: Unauthorized
        '404':
          description: Document not found

    put:
      tags:
        - Documents
      summary: Update document metadata
      operationId: updateDocument
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                documentType:
                  type: string
                  enum: [rfp, proposal, contract, other]
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
        '422':
          description: Validation error

    delete:
      tags:
        - Documents
      summary: Delete a document
      operationId: deleteDocument
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '204':
          description: Document deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Document not found

  /documents/{id}/download:
    get:
      tags:
        - Documents
      summary: Download a document
      operationId: downloadDocument
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '200':
          description: Document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Document not found

  # Dashboard endpoints
  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      operationId: getDashboardStats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  proposalStats:
                    $ref: '#/components/schemas/ProposalStats'
                  recentActivity:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  upcomingDeadlines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deadline'
        '401':
          description: Unauthorized

  /dashboard/proposals/recent:
    get:
      tags:
        - Dashboard
      summary: Get recent proposals
      operationId: getRecentProposals
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 5
          description: Number of proposals to return
      responses:
        '200':
          description: List of recent proposals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalSummary'
        '401':
          description: Unauthorized

  /dashboard/proposals/upcoming:
    get:
      tags:
        - Dashboard
      summary: Get upcoming proposal deadlines
      operationId: getUpcomingProposalDeadlines
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: days
          schema:
            type: integer
            minimum: 1
            maximum: 30
            default: 7
          description: Number of days to look ahead
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 5
          description: Number of proposals to return
      responses:
        '200':
          description: List of upcoming proposal deadlines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deadline'
        '401':
          description: Unauthorized

  /dashboard/activity:
    get:
      tags:
        - Dashboard
      summary: Get user activity feed
      operationId: getUserActivity
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of activities to return
      responses:
        '200':
          description: User activity feed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
            avatar:
              type: string
            initials:
              type: string
        token:
          type: string
        expires_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        total:
          type: integer
        per_page:
          type: integer
        current_page:
          type: integer
        last_page:
          type: integer
        from:
          type: integer
        to:
          type: integer

    ProposalSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        client:
          type: string
        status:
          type: string
          enum: [draft, submitted, won, lost]
        submissionDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProposalInput:
      type: object
      properties:
        title:
          type: string
        client:
          type: string
        clientIndustry:
          type: string
        dueDate:
          type: string
          format: date
        rfpSummary:
          type: string
        keyRequirements:
          type: string
        evaluationCriteria:
          type: string
        budget:
          type: string
        timeline:
          type: string
        proposalTemplate:
          type: string
        status:
          type: string
          enum: [draft, submitted, won, lost]
      required:
        - title
        - client

    Proposal:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        client:
          type: string
        clientIndustry:
          type: string
        status:
          type: string
          enum: [draft, submitted, won, lost]
        submissionDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        rfpSummary:
          type: string
        keyRequirements:
          type: string
        evaluationCriteria:
          type: string
        budget:
          type: string
        timeline:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/ProposalSection'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProposalSection:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
      required:
        - id
        - title
        - content

    CommentInput:
      type: object
      properties:
        section:
          type: string
        content:
          type: string
      required:
        - content

    Comment:
      type: object
      properties:
        id:
          type: string
        section:
          type: string
        user:
          type: object
          properties:
            name:
              type: string
            avatar:
              type: string
            initials:
              type: string
        timestamp:
          type: string
          format: date-time
        content:
          type: string
        resolved:
          type: boolean
          default: false
      required:
        - id
        - user
        - timestamp
        - content

    Template:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name

    # New schemas for Knowledge Base
    KnowledgeDocumentInput:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        content:
          type: string
        file:
          type: string
          format: binary
        fileType:
          type: string
          enum: [PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX]
      required:
        - title
        - category
        - description

    KnowledgeDocument:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        category:
          type: string
        description:
          type: string
        content:
          type: string
        fileUrl:
          type: string
        fileType:
          type: string
          enum: [PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX]
        fileSize:
          type: integer
          description: File size in bytes
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - category
        - createdAt

    KnowledgeDocumentRef:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        category:
          type: string
        relevance:
          type: number
          format: float
          minimum: 0
          maximum: 1
      required:
        - id
        - title

    # New schemas for Document Upload
    Document:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        documentType:
          type: string
          enum: [rfp, proposal, contract, other]
        fileUrl:
          type: string
        fileType:
          type: string
          enum: [PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX]
        fileSize:
          type: integer
          description: File size in bytes
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - documentType
        - fileUrl
        - fileType
        - createdAt

    # New schemas for Dashboard
    ProposalStats:
      type: object
      properties:
        total:
          type: integer
        draft:
          type: integer
        submitted:
          type: integer
        won:
          type: integer
        lost:
          type: integer
        winRate:
          type: number
          format: float
        averageValue:
          type: number
          format: float

    Activity:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [proposal_created, proposal_updated, proposal_submitted, comment_added, document_uploaded]
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            avatar:
              type: string
            initials:
              type: string
        target:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
              enum: [proposal, document, comment]
            title:
              type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - id
        - type
        - user
        - timestamp

    Deadline:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [proposal, document]
        title:
          type: string
        dueDate:
          type: string
          format: date
        daysRemaining:
          type: integer
        link:
          type: string
      required:
        - id
        - type
        - title
        - dueDate
