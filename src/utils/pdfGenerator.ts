import { jsPDF } from "jspdf";
import type { RfpSummaryData } from "../types/rfp";

const PAGE_WIDTH = 210;
const MARGIN_LEFT = 20;
const MARGIN_RIGHT = 20;
const CONTENT_WIDTH = PAGE_WIDTH - MARGIN_LEFT - MARGIN_RIGHT;
const SECTION_SPACING = 6;  // Further reduced spacing
const LIST_INDENT = 7;     // Slightly reduced indent
const HEADER_HEIGHT = 20;  // Increased header height for better logo placement

export const generateRfpSummaryPdf = (summaryData: RfpSummaryData) => {
  const doc = new jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: "a4",
    compress: true
  });

  let yPos = HEADER_HEIGHT + 8; // Adjusted starting position

  // Helper function to add header to each page
  const addHeader = (pageNum: number) => {
    // Add subtle grey background for header
    doc.setFillColor(250, 250, 250);
    doc.rect(0, 0, PAGE_WIDTH, HEADER_HEIGHT, 'F');

    // Try to add logo
    try {
      const logoHeight = 16;  // Increased logo size
      const logoWidth = 16;   // Maintained aspect ratio
      doc.addImage("/OSSA_icon.png", "PNG", MARGIN_LEFT, 2, logoWidth, logoHeight);
    } catch (error) {
      console.error("Error adding logo to header:", error);
    }

    // Add page number on the right
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);
    doc.text(`Page ${pageNum}`, PAGE_WIDTH - MARGIN_RIGHT, 12, { align: "right" });
  };

  const addFooter = (pageNum: number) => {
    doc.setFontSize(8); // Small text size for fine print
    doc.setTextColor(128, 128, 128); // Grey color for subtle appearance
    doc.setFont("helvetica", "normal");
    doc.text("Sensitivity: Internal, generated by OSSA, your AI RFP companion", MARGIN_LEFT, 287);
  };

  // Helper functions
  const addHeading = (text: string, size = 12) => { // Reduced heading size
    const headingHeight = size / 2 + 2; // Reduced padding
    doc.setFillColor(248, 248, 248); // More subtle background
    doc.rect(MARGIN_LEFT - 2, yPos - (size / 2), CONTENT_WIDTH + 4, headingHeight, 'F');
    
    doc.setFont("helvetica", "bold");
    doc.setFontSize(size);
    doc.setTextColor(0, 0, 0);
    doc.text(text, MARGIN_LEFT, yPos);
    yPos += headingHeight + 2;
    checkPageBreak();
  };

  const addText = (text: string, size = 10, indent = 0) => {
    if (!text) return;
    
    doc.setFont("helvetica", "normal");
    doc.setFontSize(size);
    doc.setTextColor(40, 40, 40);
    
    const lines = doc.splitTextToSize(text.toString(), CONTENT_WIDTH - indent);
    doc.text(lines, MARGIN_LEFT + indent, yPos);
    yPos += (lines.length * size / 2) + 1.5; // Reduced spacing
    checkPageBreak();
  };

  const addList = (items: string[], size = 10) => {
    if (!Array.isArray(items) || items.length === 0) return;
    
    doc.setFont("helvetica", "normal");
    doc.setFontSize(size);
    doc.setTextColor(40, 40, 40);
    
    items.forEach((item, index) => {
      if (!item) return;
      
      const bulletPoint = "•";
      const bulletWidth = doc.getTextWidth(bulletPoint + " ");
      
      const itemText = doc.splitTextToSize(item.toString(), CONTENT_WIDTH - LIST_INDENT - bulletWidth);
      
      doc.text(bulletPoint, MARGIN_LEFT, yPos);
      doc.text(itemText, MARGIN_LEFT + LIST_INDENT, yPos);
      
      yPos += (itemText.length * size / 2) + 1.5; // Reduced spacing between list items
      checkPageBreak();
    });
    
    yPos += 1; // Minimal spacing after list
  };

  const checkPageBreak = () => {
    if (yPos > 280) {
      doc.addPage();
      const newPageNum = doc.internal.pages.length - 1;
      addHeader(newPageNum);
      addFooter(newPageNum);
      yPos = HEADER_HEIGHT + 8;
    }
  };

  const addSectionBreak = () => {
    yPos += SECTION_SPACING;
    checkPageBreak();
  };

  // Add header and footer to first page
  addHeader(1);
  addFooter(1);

  // Document Title - now more compact
  doc.setFontSize(14); // Reduced from 16
  doc.setFont("helvetica", "bold");
  doc.setTextColor(0, 0, 0);
  const title = summaryData.rfpSummary["Project Title"] || "RFP Summary";
  const titleLines = doc.splitTextToSize(title, CONTENT_WIDTH);
  doc.text(titleLines, MARGIN_LEFT, yPos);
  yPos += (titleLines.length * 8) + 4; // Reduced spacing
  addSectionBreak();

  // Project Overview Section
  addHeading("Project Overview", 12);
  addText(summaryData.rfpSummary["Project Overview"]);
  addSectionBreak();

  // Key Information Section with contact info
  addHeading("Key Information", 12);
  doc.setFillColor(250, 250, 250);
  doc.rect(MARGIN_LEFT, yPos, CONTENT_WIDTH, 42, 'F'); // Increased height for contact info
  
  const keyInfoY = yPos + 3;
  doc.setFontSize(10);
  doc.setTextColor(40, 40, 40);
  addText(`Requestor: ${summaryData.rfpSummary["Requestor"]}`, 10, 5);
  addText(`Deadline: ${summaryData.rfpSummary["Deadline"]}`, 10, 5);
  addText(`Timeline: ${summaryData.timeline["Timeline"]}`, 10, 5);
  addText(`Budget: ${summaryData.budget}`, 10, 5);
  
  // Add contact info to Key Information section
  const contactInfo = summaryData.evaluationCriteria["Contact Information"];
  if (typeof contactInfo === 'string') {
    addText(`Contact: ${contactInfo}`, 10, 5);
  } else if (typeof contactInfo === 'object' && contactInfo !== null) {
    Object.entries(contactInfo).forEach(([key, value]) => {
      addText(`${key}: ${value}`, 10, 5);
    });
  }
  
  yPos = keyInfoY + 46;
  addSectionBreak();

  // Scope of Work Section
  if (summaryData.keyRequirements?.length > 0) {
    addHeading("Scope of Work", 12);
    addList(summaryData.keyRequirements);
    addSectionBreak();
  }

  // Deliverables Section
  if (summaryData.deliverables?.length > 0) {
    addHeading("Deliverables", 12);
    addList(summaryData.deliverables);
    addSectionBreak();
  }

  // Technical Requirements Section
  if (summaryData.technicalRequirements?.length > 0) {
    addHeading("Technical Requirements", 12);
    addList(summaryData.technicalRequirements);
    addSectionBreak();
  }

  // Keywords Section with subtle box
  if (summaryData.keywords?.length > 0) {
    addHeading("Keywords", 12);
    doc.setFillColor(250, 250, 250);
    doc.rect(MARGIN_LEFT, yPos, CONTENT_WIDTH, 14, 'F');
    const keywordText = summaryData.keywords.join(" • ");
    addText(keywordText, 10, 5);
    addSectionBreak();
  }

  // Clarifying Questions Section
  if (summaryData.clarifyingQuestions?.length > 0) {
    addHeading("Clarifying Questions", 12);
    addList(summaryData.clarifyingQuestions);
    addSectionBreak();
  }

  // Add footer to all pages (in case some pages were missed)
  const pageCount = doc.internal.pages.length;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    addFooter(i);
  }

  return doc;
};