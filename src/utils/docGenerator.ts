import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, BorderStyle, Header, Footer, ImageRun, NumberFormat, PageNumber } from "docx";
import type { RfpSummaryData } from "../types/rfp";

/**
 * Generates a Word document from the RFP summary data
 * @param formData The RFP summary data
 * @returns Promise<Blob> The generated document as a blob
 */
export const generateRfpSummaryDoc = async (formData: RfpSummaryData): Promise<Blob> => {
  try {
    console.log("Starting document generation with data:", formData);
    
    if (!formData) {
      throw new Error("formData is required");
    }

    // Create header with logo and page numbers
    const header = new Header({
      children: [
        new Paragraph({
          children: [
            // Page number on the right
            new TextRun({
              children: ["Page ", PageNumber.CURRENT],
              size: 18 // 9pt
            })
          ],
          alignment: AlignmentType.RIGHT
        })
      ]
    });

    // Create footer with gray text
    const footer = new Footer({
      children: [
        new Paragraph({
          children: [
            new TextRun({
              text: "Sensitivity: Internal, generated by OSSA, your AI RFP companion",
              size: 16, // 8pt
              color: "808080"
            })
          ],
          spacing: { before: 200 },
          alignment: AlignmentType.LEFT
        })
      ]
    });

    const children = [];
    
    // Title with proper spacing and formatting
    const projectTitle = formData?.rfpSummary?.["Project Title"] || "RFP Summary";
    console.log("Adding title:", projectTitle);
    
    children.push(
      new Paragraph({
        text: projectTitle,
        heading: HeadingLevel.HEADING_1,
        spacing: { before: 400, after: 200, line: 340 }
      })
    );

    // Project Overview Section with improved formatting
    children.push(
      new Paragraph({
        text: "Project Overview",
        heading: HeadingLevel.HEADING_2,
        spacing: { before: 300, after: 120, line: 340 }
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: formData?.rfpSummary?.["Project Overview"] || "",
            size: 24 // 12pt
          })
        ],
        spacing: { before: 120, after: 240 }
      })
    );

    // Key Information Section with box styling
    children.push(
      new Paragraph({
        text: "Key Information",
        heading: HeadingLevel.HEADING_2,
        spacing: { before: 300, after: 120 }
      })
    );

    // Key Info Box with improved formatting
    const keyInfoItems = [
      `Requestor: ${formData?.rfpSummary?.["Requestor"] || "Not specified"}`,
      `Deadline: ${formData?.rfpSummary?.["Deadline"] || "Not specified"}`,
      `Timeline: ${formData?.timeline?.["Timeline"] || "Not specified"}`,
      `Budget: ${formData?.budget || "Not specified"}`
    ];

    // Add contact info to key information
    const contactInfo = formData?.evaluationCriteria?.["Contact Information"];
    if (typeof contactInfo === 'string') {
      keyInfoItems.push(`Contact: ${contactInfo}`);
    } else if (typeof contactInfo === 'object' && contactInfo !== null) {
      Object.entries(contactInfo).forEach(([key, value]) => {
        keyInfoItems.push(`${key}: ${value}`);
      });
    }

    children.push(
      new Paragraph({
        children: keyInfoItems.map(item => new TextRun({ 
          text: item + "\n",
          size: 24 // 12pt
        })),
        spacing: { before: 120, after: 240 },
        border: {
          top: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" },
          bottom: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" },
          left: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" },
          right: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" }
        },
        shading: { fill: "FAFAFA" }
      })
    );

    // Scope of Work Section with bullet points
    if (Array.isArray(formData?.keyRequirements) && formData.keyRequirements.length > 0) {
      children.push(
        new Paragraph({
          text: "Scope of Work",
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 300, after: 120 }
        }),
        ...formData.keyRequirements.map(
          (item: string) =>
            new Paragraph({
              text: `• ${item}`,
              spacing: { before: 120, after: 120 },
              bullet: {
                level: 0
              }
            })
        )
      );
    }

    // Deliverables Section with bullet points
    if (Array.isArray(formData?.deliverables) && formData.deliverables.length > 0) {
      children.push(
        new Paragraph({
          text: "Deliverables",
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 300, after: 120 }
        }),
        ...formData.deliverables.map(
          (item: string) =>
            new Paragraph({
              text: `• ${item}`,
              spacing: { before: 120, after: 120 },
              bullet: {
                level: 0
              }
            })
        )
      );
    }

    // Technical Requirements Section with bullet points
    if (Array.isArray(formData?.technicalRequirements) && formData.technicalRequirements.length > 0) {
      children.push(
        new Paragraph({
          text: "Technical Requirements",
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 300, after: 120 }
        }),
        ...formData.technicalRequirements.map(
          (item: string) =>
            new Paragraph({
              text: `• ${item}`,
              spacing: { before: 120, after: 120 },
              bullet: {
                level: 0
              }
            })
        )
      );
    }

    // Keywords Section with box styling
    if (Array.isArray(formData?.keywords) && formData.keywords.length > 0) {
      children.push(
        new Paragraph({
          text: "Keywords",
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 300, after: 120 }
        }),
        new Paragraph({
          text: formData.keywords.join(" • "),
          spacing: { before: 120, after: 240 },
          border: {
            top: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" },
            bottom: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" },
            left: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" },
            right: { style: BorderStyle.SINGLE, size: 1, color: "F0F0F0" }
          },
          shading: { fill: "FAFAFA" }
        })
      );
    }

    // Clarifying Questions Section with bullet points
    if (Array.isArray(formData?.clarifyingQuestions) && formData.clarifyingQuestions.length > 0) {
      children.push(
        new Paragraph({
          text: "Clarifying Questions",
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 300, after: 120 }
        }),
        ...formData.clarifyingQuestions.map(
          (item: string) =>
            new Paragraph({
              text: `• ${item}`,
              spacing: { before: 120, after: 120 },
              bullet: {
                level: 0
              }
            })
        )
      );
    }

    console.log("Creating document with sections");
    const doc = new Document({
      sections: [{
        properties: {
          page: {
            margin: {
              top: 1440, // 1 inch in twips
              right: 1440,
              bottom: 1440,
              left: 1440
            },
            pageNumbers: {
              start: 1,
              formatType: NumberFormat.DECIMAL
            }
          }
        },
        headers: {
          default: header
        },
        footers: {
          default: footer
        },
        children: children
      }]
    });

    console.log("Packing document to blob");
    return await Packer.toBlob(doc);
  } catch (error) {
    console.error("Error in generateRfpSummaryDoc:", error);
    console.error("Error details:", {
      formData: formData,
      errorMessage: error.message,
      errorStack: error.stack
    });
    throw error;
  }
}; 